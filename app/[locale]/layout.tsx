import type { Metadata } from "next";
import "../globals.css";
import { ThemeProvider } from "../components/theme-provider";
import { ThemeToggle } from "../components/theme-toggle";
import { LanguageSwitcher } from "../components/language-switcher";

import { NextIntlClientProvider, hasLocale } from "next-intl";
import { notFound } from "next/navigation";
import { routing } from "@/i18n/routing";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

/**
 * Root layout component for locale-specific pages with internationalization and theming support.
 *
 * Validates the requested locale, applies the appropriate language and font settings, and wraps content with providers for internationalization and theme management. Renders language and theme controls alongside the page content.
 *
 * @param children - The page content to render within the layout
 * @param params - A promise resolving to an object containing the requested locale
 * @returns The complete HTML structure for the page, configured for the specified locale and theme
 */
export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}>) {
  // Ensure that the incoming `locale` is valid
  const { locale } = await params;
  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }
  return (
    <html lang={locale} suppressHydrationWarning>
      <body
        className={"antialiased font-normal"}
        style={{ fontFamily: "var(--primary-font)" }}
      >
        <NextIntlClientProvider>
          <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange
          >
            <LanguageSwitcher locale={locale} />
            <ThemeToggle />
            {children}
          </ThemeProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
